@startuml
actor User
participant "CalorieTrackerCLI" as CLI
participant "CalorieTrackerController" as Controller
participant "CommandInvoker" as Invoker
participant "AddFoodEntryCommand" as Command
participant "LogManager" as LogManager
participant "DailyLog" as DailyLog
participant "FoodEntry" as FoodEntry
participant "Food" as Food

User -> CLI: searchFoods()
activate CLI

CLI -> Controller: searchFoods(query)
activate Controller
Controller --> CLI: matchingFoods
deactivate Controller

CLI --> User: display food options
User -> CLI: select food
User -> CLI: enter servings

CLI -> Controller: addFoodEntry(selectedFood, servings)
activate Controller

Controller -> Command: create(logManager, date, food, servings)
activate Command
Command --> Controller: command
deactivate Command

Controller -> Invoker: executeCommand(command)
activate Invoker

Invoker -> Command: execute()
activate Command

Command -> LogManager: addFoodEntry(date, food, servings)
activate LogManager

LogManager -> FoodEntry: create(food, servings, timestamp)
activate FoodEntry
FoodEntry --> LogManager: entry
deactivate FoodEntry

LogManager -> DailyLog: addEntry(entry)
activate DailyLog
DailyLog --> LogManager: success
deactivate DailyLog

LogManager --> Command: success
deactivate LogManager

Command -> Command: storeEntryIndexForUndo()
Command --> Invoker: success
deactivate Command

Invoker -> Invoker: addToHistory(command)
Invoker --> Controller: success
deactivate Invoker

Controller --> CLI: success
deactivate Controller

CLI --> User: display confirmation
CLI --> User: return to menu

deactivate CLI
@enduml